# Azure DevOps Pipeline for Project-5
# Multi-cloud enterprise deployment pipeline

trigger:
  branches:
    include:
    - main
    - develop
    - release/*
  paths:
    exclude:
    - docs/*
    - README.md

pr:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - docs/*
    - README.md

variables:
  # Build Configuration
  buildConfiguration: 'Release'
  vmImageName: 'ubuntu-latest'
  
  # Docker Configuration
  dockerRegistryServiceConnection: 'docker-registry'
  imageRepository: 'project5'
  containerRegistry: 'project5registry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/applications/*/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Configuration
  kubernetesServiceConnection: 'kubernetes-cluster'
  namespace: 'default'
  
  # Security Scanning
  trivyVersion: 'latest'
  sonarQubeServiceConnection: 'sonarqube'

stages:
- stage: SecurityScan
  displayName: 'Security and Quality Scan'
  jobs:
  - job: StaticAnalysis
    displayName: 'Static Code Analysis'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: SonarQubePrepare@4
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: $(sonarQubeServiceConnection)
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'project5'
        cliProjectName: 'Project-5'
        cliSources: 'applications/'
        extraProperties: |
          sonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.typescript.lcov.reportPaths=coverage/lcov.info
    
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '18.x'
    
    - script: |
        cd applications/frontend
        npm ci
        npm run test -- --coverage --watchAll=false
        npm run lint
      displayName: 'Frontend Tests and Linting'
    
    - script: |
        cd applications/backend-api
        npm ci
        npm run test -- --coverage
        npm run lint
      displayName: 'Backend Tests and Linting'
    
    - task: SonarQubeAnalyze@4
      displayName: 'Run SonarQube Analysis'
    
    - task: SonarQubePublish@4
      displayName: 'Publish SonarQube Results'
      inputs:
        pollingTimeoutSec: '300'

  - job: VulnerabilityScan
    displayName: 'Vulnerability Scanning'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: 'Build Frontend Image for Scanning'
      inputs:
        command: 'build'
        repository: '$(imageRepository)-frontend'
        dockerfile: 'applications/frontend/Dockerfile'
        buildContext: 'applications/frontend'
        tags: 'scan'
    
    - task: Docker@2
      displayName: 'Build Backend Image for Scanning'
      inputs:
        command: 'build'
        repository: '$(imageRepository)-backend'
        dockerfile: 'applications/backend-api/Dockerfile'
        buildContext: 'applications/backend-api'
        tags: 'scan'
    
    - script: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan images
        trivy image --format sarif --output trivy-frontend.sarif $(imageRepository)-frontend:scan
        trivy image --format sarif --output trivy-backend.sarif $(imageRepository)-backend:scan
        
        # Scan filesystem
        trivy fs --format sarif --output trivy-fs.sarif .
      displayName: 'Run Trivy Security Scan'
    
    - task: PublishTestResults@2
      displayName: 'Publish Security Scan Results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: 'trivy-*.sarif'
        failTaskOnFailedTests: false

- stage: Build
  displayName: 'Build and Push Images'
  dependsOn: SecurityScan
  condition: succeeded()
  jobs:
  - job: BuildImages
    displayName: 'Build Docker Images'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: 'Build and Push Frontend Image'
      inputs:
        command: 'buildAndPush'
        repository: '$(imageRepository)-frontend'
        dockerfile: 'applications/frontend/Dockerfile'
        buildContext: 'applications/frontend'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    
    - task: Docker@2
      displayName: 'Build and Push Backend Image'
      inputs:
        command: 'buildAndPush'
        repository: '$(imageRepository)-backend'
        dockerfile: 'applications/backend-api/Dockerfile'
        buildContext: 'applications/backend-api'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    
    - task: Docker@2
      displayName: 'Build and Push User Service Image'
      inputs:
        command: 'buildAndPush'
        repository: '$(imageRepository)-user-service'
        dockerfile: 'applications/microservices/user-service/Dockerfile'
        buildContext: 'applications/microservices/user-service'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  variables:
    environment: 'development'
    namespace: 'dev'
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Development Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            displayName: 'Deploy with Helm'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: 'infrastructure/helm-charts/project5'
              releaseName: 'project5-dev'
              valueFile: 'infrastructure/helm-charts/project5/values-dev.yaml'
              arguments: |
                --set image.tag=$(tag)
                --set environment=development
                --set ingress.hosts[0].host=dev.project5.example.com
          
          - task: Kubernetes@1
            displayName: 'Verify Deployment'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(namespace)
              command: 'get'
              arguments: 'pods,svc,ingress'

- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    environment: 'staging'
    namespace: 'staging'
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            displayName: 'Deploy with Helm'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: 'infrastructure/helm-charts/project5'
              releaseName: 'project5-staging'
              valueFile: 'infrastructure/helm-charts/project5/values-staging.yaml'
              arguments: |
                --set image.tag=$(tag)
                --set environment=staging
                --set ingress.hosts[0].host=staging.project5.example.com
          
          - script: |
              # Wait for deployment to be ready
              kubectl wait --for=condition=available --timeout=300s deployment/frontend -n $(namespace)
              kubectl wait --for=condition=available --timeout=300s deployment/backend-api -n $(namespace)
              
              # Run smoke tests
              FRONTEND_URL="https://staging.project5.example.com"
              BACKEND_URL="https://api.staging.project5.example.com"
              
              # Test frontend
              curl -f $FRONTEND_URL || exit 1
              
              # Test backend health
              curl -f $BACKEND_URL/health || exit 1
              
              echo "Smoke tests passed!"
            displayName: 'Run Smoke Tests'

- stage: DeployProduction
  displayName: 'Deploy to Production'
  dependsOn: DeployStaging
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    environment: 'production'
    namespace: 'production'
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      canary:
        increments: [25, 50, 100]
        preDeploy:
          steps:
          - script: |
              echo "Starting canary deployment to production"
              echo "Current image tag: $(tag)"
            displayName: 'Pre-deployment Checks'
        
        deploy:
          steps:
          - task: HelmDeploy@0
            displayName: 'Canary Deploy with Helm'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(namespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: 'infrastructure/helm-charts/project5'
              releaseName: 'project5-prod'
              valueFile: 'infrastructure/helm-charts/project5/values-prod.yaml'
              arguments: |
                --set image.tag=$(tag)
                --set environment=production
                --set ingress.hosts[0].host=project5.example.com
                --set replicaCount=$(strategy.increment)
        
        postDeploy:
          steps:
          - script: |
              # Monitor deployment health
              kubectl get pods -n $(namespace)
              kubectl get svc -n $(namespace)
              
              # Check application health
              HEALTH_URL="https://project5.example.com/health"
              for i in {1..10}; do
                if curl -f $HEALTH_URL; then
                  echo "Health check passed"
                  break
                fi
                echo "Health check failed, retrying in 30s..."
                sleep 30
              done
            displayName: 'Post-deployment Health Check'

- stage: PostDeployment
  displayName: 'Post-deployment Tasks'
  dependsOn: DeployProduction
  condition: succeeded()
  jobs:
  - job: NotifyTeams
    displayName: 'Notify Teams'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: InvokeRESTAPI@1
      displayName: 'Notify Slack'
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'slack-webhook'
        method: 'POST'
        body: |
          {
            "text": "🚀 Project-5 deployment completed successfully!",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Build",
                    "value": "$(Build.BuildNumber)",
                    "short": true
                  },
                  {
                    "title": "Environment",
                    "value": "Production",
                    "short": true
                  },
                  {
                    "title": "Image Tag",
                    "value": "$(tag)",
                    "short": true
                  }
                ]
              }
            ]
          }
    
    - script: |
        # Update deployment tracking
        echo "Deployment completed at $(date)"
        echo "Build ID: $(Build.BuildId)"
        echo "Image Tag: $(tag)"
        echo "Environment: Production"
      displayName: 'Log Deployment Info'

  - job: UpdateDocumentation
    displayName: 'Update Documentation'
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        # Update deployment history
        echo "$(date): Deployed build $(Build.BuildId) to production" >> docs/deployment-history.md
        
        # Update version in documentation
        sed -i "s/Version: .*/Version: $(tag)/g" docs/architecture/README.md
      displayName: 'Update Deployment Documentation'
    
    - task: GitHubRelease@1
      displayName: 'Create GitHub Release'
      inputs:
        gitHubConnection: 'github-connection'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: 'v$(tag)'
        title: 'Release v$(tag)'
        releaseNotesSource: 'inline'
        releaseNotesInline: |
          ## Release v$(tag)
          
          ### Changes
          - Multi-cloud infrastructure deployment
          - Enhanced security features
          - Performance optimizations
          - Updated monitoring and observability
          
          ### Deployment Information
          - Build: $(Build.BuildNumber)
          - Environment: Production
          - Deployed: $(System.DateTime)
          
          ### Docker Images
          - Frontend: $(containerRegistry)/$(imageRepository)-frontend:$(tag)
          - Backend: $(containerRegistry)/$(imageRepository)-backend:$(tag)
          - User Service: $(containerRegistry)/$(imageRepository)-user-service:$(tag)
        assets: '$(Build.ArtifactStagingDirectory)/*'
        isDraft: false
        isPreRelease: false