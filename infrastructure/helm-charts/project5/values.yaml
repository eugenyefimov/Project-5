# Default values for Project-5 Enterprise Multi-Cloud Infrastructure
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Namespace configuration
namespace: default

# Services configuration
services:
  # Frontend Service (React.js)
  - name: frontend
    tier: frontend
    replicas: 3
    image:
      repository: project5/frontend
      tag: "latest"
      pullPolicy: Always
    port: 80
    targetPort: 80
    service:
      enabled: true
      type: ClusterIP
      ports:
        - port: 80
          targetPort: 80
          name: http
    serviceAccount:
      create: true
      automount: false
    env:
      NODE_ENV: production
      REACT_APP_API_URL:
        valueFrom:
          configMapKeyRef:
            name: frontend-config
            key: api-url
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    healthCheck:
      enabled: true
      liveness:
        path: /health
        initialDelaySeconds: 30
        periodSeconds: 10
      readiness:
        path: /ready
        initialDelaySeconds: 5
        periodSeconds: 5
    securityContext:
      runAsUser: 1000
      fsGroup: 2000
      readOnlyRootFilesystem: true
    affinity:
      enabled: true
    persistence:
      enabled: false
    volumeMounts: []
    volumes: []

  # Backend API Service (Node.js/Express)
  - name: backend-api
    tier: backend
    replicas: 3
    image:
      repository: project5/backend-api
      tag: "latest"
      pullPolicy: Always
    port: 8000
    targetPort: 8000
    service:
      enabled: true
      type: ClusterIP
      ports:
        - port: 80
          targetPort: 8000
          name: http
    serviceAccount:
      create: true
      automount: false
    env:
      NODE_ENV: production
      PORT: "8000"
      DB_HOST:
        valueFrom:
          secretKeyRef:
            name: backend-api-secrets
            key: db-host
      DB_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: backend-api-secrets
            key: db-password
      REDIS_URL:
        valueFrom:
          secretKeyRef:
            name: backend-api-secrets
            key: redis-url
      JWT_SECRET:
        valueFrom:
          secretKeyRef:
            name: backend-api-secrets
            key: jwt-secret
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
    healthCheck:
      enabled: true
      liveness:
        path: /health
        initialDelaySeconds: 30
        periodSeconds: 10
      readiness:
        path: /ready
        initialDelaySeconds: 5
        periodSeconds: 5
    securityContext:
      runAsUser: 1000
      fsGroup: 2000
      readOnlyRootFilesystem: true
    affinity:
      enabled: true
    persistence:
      enabled: false
    volumeMounts: []
    volumes: []

  # User Service Microservice
  - name: user-service
    tier: microservice
    replicas: 3
    image:
      repository: project5/user-service
      tag: "latest"
      pullPolicy: Always
    port: 3000
    targetPort: 3000
    service:
      enabled: true
      type: ClusterIP
      ports:
        - port: 80
          targetPort: 3000
          name: http
    serviceAccount:
      create: true
      automount: false
    env:
      NODE_ENV: production
      PORT: "3000"
      DB_HOST:
        valueFrom:
          secretKeyRef:
            name: user-service-secrets
            key: db-host
      DB_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: user-service-secrets
            key: db-password
      REDIS_URL:
        valueFrom:
          secretKeyRef:
            name: user-service-secrets
            key: redis-url
      JWT_SECRET:
        valueFrom:
          secretKeyRef:
            name: user-service-secrets
            key: jwt-secret
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    healthCheck:
      enabled: true
      liveness:
        path: /health
        initialDelaySeconds: 30
        periodSeconds: 10
      readiness:
        path: /ready
        initialDelaySeconds: 5
        periodSeconds: 5
    securityContext:
      runAsUser: 1000
      fsGroup: 2000
      readOnlyRootFilesystem: true
    affinity:
      enabled: true
    persistence:
      enabled: false
    volumeMounts: []
    volumes: []

# Ingress configuration
ingress:
  enabled: true
  name: project5-ingress
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: project5.example.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: frontend
              port:
                number: 80
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: backend-api
              port:
                number: 80
        - path: /api/users
          pathType: Prefix
          backend:
            service:
              name: user-service
              port:
                number: 80
  tls:
    - secretName: project5-tls
      hosts:
        - project5.example.com

# Database configuration
databases:
  postgresql:
    enabled: true
    auth:
      postgresPassword: "changeme"
      database: "project5"
    primary:
      persistence:
        enabled: true
        size: 20Gi
        storageClass: fast-ssd
    metrics:
      enabled: true
    backup:
      enabled: true
      schedule: "0 2 * * *"

  redis:
    enabled: true
    auth:
      enabled: true
      password: "changeme"
    master:
      persistence:
        enabled: true
        size: 10Gi
        storageClass: fast-ssd
    metrics:
      enabled: true
    cluster:
      enabled: true
      slaveCount: 2

# Monitoring and Observability
monitoring:
  prometheus:
    enabled: true
    retention: 15d
    storageSize: 50Gi
    alertmanager:
      enabled: true
    nodeExporter:
      enabled: true
    kubeStateMetrics:
      enabled: true
  
  grafana:
    enabled: true
    adminPassword: "changeme"
    persistence:
      enabled: true
      size: 10Gi
    dashboards:
      enabled: true
    plugins:
      - grafana-piechart-panel
      - grafana-worldmap-panel
  
  jaeger:
    enabled: true
    storage:
      type: elasticsearch
      elasticsearch:
        host: elasticsearch
        port: 9200
  
  elasticsearch:
    enabled: true
    replicas: 3
    minimumMasterNodes: 2
    persistence:
      enabled: true
      size: 30Gi
  
  kibana:
    enabled: true
    elasticsearch:
      host: elasticsearch
      port: 9200

# Security configuration
security:
  networkPolicies:
    enabled: true
  podSecurityPolicies:
    enabled: true
  rbac:
    enabled: true
  vault:
    enabled: true
    storage:
      size: 10Gi
  
# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Node configuration
nodeSelector: {}
tolerances: []
affinity: {}

# Resource quotas
resourceQuotas:
  enabled: true
  hard:
    requests.cpu: "10"
    requests.memory: 20Gi
    limits.cpu: "20"
    limits.memory: 40Gi
    persistentvolumeclaims: "10"

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: 30
  storage:
    type: s3
    s3:
      bucket: project5-backups
      region: us-west-2