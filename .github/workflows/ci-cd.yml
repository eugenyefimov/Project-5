name: Multi-Cloud CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: applications/frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: applications/frontend
        run: npm ci

      - name: Run ESLint
        working-directory: applications/frontend
        run: npm run lint

      - name: Run Prettier check
        working-directory: applications/frontend
        run: npm run format -- --check

      - name: Run frontend tests
        working-directory: applications/frontend
        run: npm test -- --coverage --watchAll=false

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Container Images
  build-images:
    name: Build & Push Images
    needs: code-quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Frontend Image
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: applications/frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Backend Image
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: applications/backend-api
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Infrastructure Validation
  terraform-validate:
    name: Terraform Validation
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Format Check
        working-directory: infrastructure/terraform/${{ matrix.cloud }}
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: infrastructure/terraform/${{ matrix.cloud }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: infrastructure/terraform/${{ matrix.cloud }}
        run: terraform validate

      - name: Run tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: TFLint
        working-directory: infrastructure/terraform/${{ matrix.cloud }}
        run: |
          tflint --init
          tflint

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/terraform/${{ matrix.cloud }}
          soft_fail: true

  # Deploy to Development Environment
  deploy-dev:
    name: Deploy to Development
    needs: [build-images, terraform-validate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy AWS Infrastructure
        working-directory: infrastructure/terraform/aws
        run: |
          terraform init
          terraform plan -var="environment=development"
          terraform apply -auto-approve -var="environment=development"

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region us-west-2 --name project5-eks

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f infrastructure/kubernetes/
          kubectl set image deployment/frontend frontend=${{ needs.build-images.outputs.frontend-image }}
          kubectl set image deployment/backend backend=${{ needs.build-images.outputs.backend-image }}

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/frontend
          kubectl wait --for=condition=available --timeout=300s deployment/backend

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    needs: [build-images, terraform-validate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy Multi-Cloud Infrastructure
        run: |
          # Deploy AWS
          cd infrastructure/terraform/aws
          terraform init
          terraform apply -auto-approve -var="environment=staging"
          
          # Deploy Azure
          cd ../azure
          terraform init
          terraform apply -auto-approve -var="environment=staging"

      - name: Deploy to Multi-Cloud Kubernetes
        run: |
          # Configure AWS EKS
          aws eks update-kubeconfig --region us-west-2 --name project5-eks
          kubectl config rename-context arn:aws:eks:us-west-2:*:cluster/project5-eks aws-cluster
          
          # Configure Azure AKS
          az aks get-credentials --resource-group project5-staging --name project5-aks
          kubectl config rename-context project5-aks azure-cluster
          
          # Deploy to AWS cluster
          kubectl --context=aws-cluster apply -f infrastructure/kubernetes/
          kubectl --context=aws-cluster set image deployment/frontend frontend=${{ needs.build-images.outputs.frontend-image }}
          
          # Deploy to Azure cluster
          kubectl --context=azure-cluster apply -f infrastructure/kubernetes/
          kubectl --context=azure-cluster set image deployment/frontend frontend=${{ needs.build-images.outputs.frontend-image }}

      - name: Run integration tests
        run: |
          npm run test:integration

  # Deploy to Production Environment
  deploy-production:
    name: Deploy to Production
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://project5.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Multi-Cloud credentials
        run: |
          # Configure AWS
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-west-2
          
          # Configure Azure
          echo '${{ secrets.AZURE_CREDENTIALS }}' | az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -t ${{ secrets.AZURE_TENANT_ID }}
          
          # Configure GCP
          echo '${{ secrets.GCP_SA_KEY }}' | base64 -d > gcp-key.json
          gcloud auth activate-service-account --key-file gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy Production Infrastructure
        run: |
          # Deploy to all three clouds
          ./scripts/deploy-production.sh

      - name: Blue-Green Deployment
        run: |
          ./scripts/blue-green-deploy.sh ${{ needs.build-images.outputs.frontend-image }} ${{ needs.build-images.outputs.backend-image }}

      - name: Run end-to-end tests
        run: |
          npm run test:e2e

      - name: Update monitoring dashboards
        run: |
          ./scripts/update-dashboards.sh

  # Notification
  notify:
    name: Notify Deployment Status
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
